##Lista de comandos útiles para Git

###Para clonar el repositorio de GitHub (sólo una vez):

git clone https://github.com/susannalles/MinimalEditions.git
###Para subir nuevos materiales a GitHub:

git init: inicia git al interno de la carpeta
git add nombre_archivo.txt: añade el documento (o carpeta) en el area de espera ("stage")
git commit -m "mi primer mensaje de cambios": describe los cambios realizados
git remote add origin https://github.com/susannalles/MinimalEditions.git: apunta a la dirección donde deseáis subir el nuevo material
git push -u origin master": subís los cambios al repositorio remote en GitHub por primera vez
###Push & Pull

git add *: añade el documento (o carpeta) en el area de espera ("stage")
git commit -m "mensaje con los detalles del cambio": describe los cambios realizados
git push origin master: subís los cambios a GitHub *git push origin [branch]: subís los cambios al repositorio remote en GitHub. Asegurar de escribir el nombre del branch que quieres subir sus cambios y nunca subes al master sin que todos revisamos sus cambios.
###Sincronizar nuestra copia con el original:

git pull: baja los cambios del repositorio remoteo a nuestra copia en local
###La Brújula: git status: señala lo que se ha modificado en la carpeta de trabajo

###Branches

git branch: Para ver en que branch estas trabajando.
git branch [name]: Para crear un branch nuevo. Asegurar de usar git checkout para camibar al branch.
git checkout [branch]: Para cambiar de un branch a otro. Así por ejemplo, si estamos en "master" y queremos cambiarnos a un branch llamado "classwork", haremos 'git checkout classwork'.
git branch -d [name]: Para quitar un branch. Es posible que git te da un error. Git no te permite quitar un branch que tiene commits no escritos al origin con esta orden. Si estas completamente seguro de que quieres quitar el branch, puedes usar la orden git branch -D [name].
git checkout -b nombre_branch: para bajar el contenido de un branch
git pull origin nombre_branch: para actualizar el contenido de un branch (y empezar a trabajar en ese branch).
git checkout -b nombre_branch: para descargar el contenido de un branch
git checkout -- file.html: para ignorar los cambios hechos en local (cuando queremos hacer un push)
###Tutoriales & Recursos:



In your github fork, you need to keep your master branch clean, by clean I mean without any changes, like that you can create at any time a branch from your master. Each time that you want to commit a bug or a feature, you need to create a branch for it, which will be a copy of your master branch.
When you do a pull request on a branch, you can continue to work on another branch and make another pull request on this other branch.

Before creating a new branch, pull the changes from upstream. Your master needs to be up to date.

Create the branch on your local machine and switch in this branch :

$ git checkout -b [name_of_your_new_branch]
Change working branch :

$ git checkout [name_of_your_new_branch]
Push the branch on github :

$ git push origin [name_of_your_new_branch]
When you want to commit something in your branch, be sure to be in your branch. Add -u parameter to set upstream.

You can see all branches created by using :

$ git branch
Which will show :

* approval_messages
  master
  master_clean
Add a new remote for your branch :

$ git remote add [name_of_your_remote]
Push changes from your commit into your branch :

$ git push [name_of_your_new_remote] [name_of_your_branch]
Update your branch when the original branch from official repository has been updated :

$ git fetch [name_of_your_remote]
Then you need to apply to merge changes, if your branch is derivated from develop you need to do :

$ git merge [name_of_your_remote]/develop
Delete a branch on your local filesystem :

$ git branch -d [name_of_your_new_branch]
To force the deletion of local branch on your filesystem :

$ git branch -D [name_of_your_new_branch]
Delete the branch on github :

$ git push origin :[name_of_your_new_branch]
The only difference is the : to say delete, you can do it too by using github interface to remove branch : https://help.github.com/articles/deleting-unused-branches.

If you want to change default branch, it's so easy with github, in your fork go into Admin and in the drop-down list default branch choose what you want.


https://confluence.atlassian.com/bitbucket/use-a-git-branch-to-merge-a-file-681902555.html

git push origin your-branch (sube el codigo al branch)
git commit -a -m "message"


Eliminar un branch Remoto:
git push origin :the_remote_branch

Eliminacion branch local y remoto
git branch -d prueba1
git push origin :prueba1



#############################################
# Push de la rama actual
git push origin $rama_actual

#############################################
# Volver a un commit anterior, descartando los cambios
git reset --HARD $SHA1

#############################################
# Ver y descargar Ramas remotas
git remote show origin
# Si hay alguna rama de la cual no tengamos los datos aún
git fetch origin
# Obtener la rama remota
git checkout --track -b $rama origin/$rama
# más simple
git checkout -t origin/$rama

git branch -a
# * master
#   remotes/origin/HEAD -> origin/master
#   remotes/origin/baremacion
#   remotes/origin/bootstrap
#   remotes/origin/fallo_registro
#   remotes/origin/master
git checkout -b baremacion remotes/origin/baremacion
#############################################

# Crear una rama basada en el HEAD
git branch $branch

# Crear una nueva rama basada en el branch $other
git checkout -b $new_branch $other

# Eliminar una rama local
git branch -d $branch

# Eliminar una rama remota
git push origin :$branch

# Eliminar las ramas remotas que ya no existan en origin (Ambos comandos hacen lo mismo)
# Ejecutar con --dry-run para ver los cambios que realizará
git fetch -p
git remote prune origin
#############################################

# Cambiar el nombre de una rama
git branch -m $nombre_rama_anterior $nombre_rama_nuevo

#############################################
# Ignorar el salto de línea en Git http://help.github.com/line-endings/
git config --global core.autocrlf input

#############################################
# Copiar un commit determinado a una rama cualquiera
git checkout $rama
git cherry-pick $SHA1

#############################################
# Trabajando con tags

# Ver los tags locales
git tag

# Añadir un tag
git tag -a v1.2 $SHA1

# Subir tags al repositorio
git push --tags

##############################################
# Deshacer el último commit (sin haber hecho push)
git reset --soft HEAD~1

# Deshacer el último commit (habiendo hecho ya un push)
git revert HEAD

##############################################
# Subir a la rama Commits parciales (los ficheros que no añado se quedan en el stash y se recuperan luego)
git add $file
git commit -m "Mensaje"
git stash
git pull --rebase origin $rama
git push origin rama
git stash pop

# list commits not pushed to the origin yet
git log origin/master..master

# list remote branches that contain $commit
git branch -r --contains $commit

# Deshacer el último commit (dejándolo como estaba con los archivos añadidos y demás)
git reset --soft HEAD^

# Modificar el último commit (incluye los archivos añadidos)
git commit --ammend -m "Nuevo mensaje"

##############################################
# Reescribiendo la "historia"
#  - Deshacer commits
#  - Unir commits
#  - Reordenar commits
#  - ...
git rebase -i HEAD~10  # Esto mira los 10 últimos

# Y veremos algo como esto:
pick ce2b738 Commit message 1
pick 2a3cdf7 Commit message 2

# Y podremos realizar las siguientes operaciones sobre los commits
# inlcuyendo reordenar los commits
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell

# Establecer la fecha de los commits anterior al rebase => git committer date = git author date
git filter-branch --env-filter 'GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; export GIT_COMMITTER_DATE' <sha1>..HEAD

##############################################
# Recuperarse de un desastre
http://www.bluemangolearning.com/blog/2009/03/recovering-from-a-disastrous-git-rebase-mistake/